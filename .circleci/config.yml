version: 2.1
orbs:
  codecov: codecov/codecov@3.2.3
executors:
  docker-executor:
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/project
  docker-executor-py36:
    docker:
      - image: cimg/python:3.6
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/project
  docker-executor-py37:
    docker:
      - image: cimg/python:3.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/project
  docker-executor-py38:
    docker:
      - image: cimg/python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/project
  docker-executor-py39:
    docker:
      - image: cimg/python:3.9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/project
  docker-executor-py310:
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/project
  docker-executor-py311:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/project

commands:
  save_pip_cache:
    steps:
      - save_cache:
          paths:
            - ~/.cache/pip
          key: drr-pip-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "requirements/requirements-test.lock.txt" }}
  restore_pip_cache:
    steps:
      - restore_cache:
          keys:
            - drr-pip-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "requirements/requirements-test.lock.txt" }}
  save_py_venv_cache:
    steps:
      - save_cache:
          paths:
            - ~/.venv
          key: drr-py-venv-{{ .Environment.CACHE_VERSION }}-{{ checksum "requirements/requirements-test.lock.txt" }}
  restore_py_venv_cache:
    steps:
      - restore_cache:
          keys:
            - drr-py-venv-{{ .Environment.CACHE_VERSION }}-{{ checksum "requirements/requirements-test.lock.txt" }}
  save_project_workspace:
    steps:
      - persist_to_workspace:
          root: ~/
          paths:
            - project/
            - .venv/
  restore_project_workspace:
    steps:
      - attach_workspace:
          at: ~/

jobs:
  setup_project:
    executor: docker-executor
    environment:
      CRYPTOGRAPHY_DONT_BUILD_RUST: 1
    steps:
      - checkout
      - restore_pip_cache
      - restore_py_venv_cache
      - run: python -m venv --copies ~/.venv
      - run: source ~/.venv/bin/activate && make install_test
      - save_pip_cache
      - save_py_venv_cache
      - save_project_workspace
  flake8:
    executor: docker-executor
    steps:
      - restore_project_workspace
      - run: source ~/.venv/bin/activate && make flake8
  mypy:
    executor: docker-executor
    steps:
      - restore_project_workspace
      - run: source ~/.venv/bin/activate && make mypy
  pylint:
    executor: docker-executor
    steps:
      - restore_project_workspace
      - run: source ~/.venv/bin/activate && make pylint
  docscheck:
    executor: docker-executor
    steps:
      - restore_project_workspace
      - run: source ~/.venv/bin/activate && make check_docs
  packagecheck:
    executor: docker-executor
    steps:
      - restore_project_workspace
      - run: source ~/.venv/bin/activate && make check_package
  test:
    executor: docker-executor
    steps:
      - restore_project_workspace
      - run: source ~/.venv/bin/activate && make test ARGS="-v --cov --cov-report xml"
  test-tox:
    parameters:
      py:
        type: string
      django:
        type: string
    executor: docker-executor-py<< parameters.py >>
    environment:
      TOXENV: py<< parameters.py >>-django<< parameters.django >>
    steps:
      - restore_project_workspace
      - restore_pip_cache
      - run: pip install tox==3.28.0
      - run: tox

workflows:
  main:
    jobs:
      - setup_project
      - flake8:
          requires:
            - setup_project
      - mypy:
          requires:
            - setup_project
      - pylint:
          requires:
            - setup_project
      - docscheck:
          requires:
            - setup_project
      - packagecheck:
          requires:
            - setup_project
      - test:
          requires:
            - flake8
            - mypy
            - setup_project
          post-steps:
            - codecov/upload
      - test-tox:
          name: test-tox-py310-django50
          py: "310"
          django: "50"
          requires:
            - test
      - test-tox:
          name: test-tox-py39-django40
          py: "39"
          django: "40"
          requires:
            - test
      - test-tox:
          name: test-tox-py39-django32
          py: "39"
          django: "32"
          requires:
            - test
      - test-tox:
          name: test-tox-py38-django31
          py: "38"
          django: "31"
          requires:
            - test
          filters:
            branches:
              only: master
      - test-tox:
          name: test-tox-py37-django30
          py: "37"
          django: "30"
          requires:
            - test
          filters:
            branches:
              only: master
      - test-tox:
          name: test-tox-py37-django22
          py: "37"
          django: "22"
          requires:
            - test
      - test-tox:
          name: test-tox-py36-django21
          py: "36"
          django: "21"
          requires:
            - test
          filters:
            branches:
              only: master
      - test-tox:
          name: test-tox-py36-django20
          py: "36"
          django: "20"
          requires:
            - test
          filters:
            branches:
              only: master
